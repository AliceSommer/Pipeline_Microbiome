repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
usethis::browse_github_pat()
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
usethis::edit_r_environ()
98ab6ed697cae17fc094f49e7da15cc1dbe177ba
usethis::edit_r_environ(98ab6ed697cae17fc094f49e7da15cc1dbe177ba)
usethis::edit_r_environ()
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi")
usethis::browse_github_pat()
devtools::install_github("stefpeschel/NetCoMi"), dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("jchiquet/spring")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("GraceYoon/SPRING")
devtools::install_github("irinagain/mixedCCA")
devtools::install_github("irinagain/mixedCCA")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("irinagain/mixedCCA")
devtools::install_github("irinagain/mixedCCA")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()), force = TRUE)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("irinagain/mixedCCA")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
load("/Users/alicesommer/Downloads/t_obs_rep_2.RData")
head(t_arrays)
head(t_arrays[,1:10])
dim(t_arrays)
load("/Users/alicesommer/Desktop/p_values_1.RData")
p_values_con <- p_values_mat
load("/Users/alicesommer/Desktop/p_values_1.RData")
p_values_con <- p_values_mat
n_docs <- 2-1
load("/Users/alicesommer/Desktop/p_values_1.RData")
p_values_con <- p_values_mat
n_docs <- 3-1
load("/Users/alicesommer/Desktop/p_values_1.RData")
p_values_conc <- p_values_mat
for (d in 1:n_docs){
load("/Users/alicesommer/Desktop/p_values_",d,".RData")
p_values_conc <- cbind(p_values_con, p_values_mat)
}
d
n_docs <- 3-1
load("/Users/alicesommer/Desktop/p_values_1.RData")
p_values_conc <- p_values_mat
for (d in 1:n_docs){
load("/Users/alicesommer/Desktop/p_values_",d,".RData")
p_values_conc <- cbind(p_values_con, p_values_mat)
}
d
for (d in 2:n_docs){
load("/Users/alicesommer/Desktop/p_values_",d,".RData")
p_values_conc <- cbind(p_values_con, p_values_mat)
}
for (d in 2:n_docs){
load(paste0("/Users/alicesommer/Desktop/p_values_",d,".RData"))
p_values_conc <- cbind(p_values_con, p_values_mat)
}
p_values_conc <- p_values_mat
for (d in 2:n_docs){
load(paste0("/Users/alicesommer/Desktop/p_values_",d,".RData"))
p_values_conc <- cbind(p_values_conc, p_values_mat)
}
dim(p_values_con)
dim(p_values_conc)
n_docs <- 3-1
load('/Users/alicesommer/Desktop/p_values_1.RData')
# load("/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_1.RData")
p_values_conc <- p_values_mat
for (d in 2:n_docs){
load(paste0("/Users/alicesommer/Desktop/p_values_",d,".RData"))
# load(paste0("n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_",d,".RData"))
p_values_conc <- cbind(p_values_conc, p_values_mat)
}
p_values_nominal <- p_values_conc[1,]
p_values_nominal
# for each rep. take the min. p_value
min_p_nrep <- apply(p_values_conc, 1, function(x) min(x, na.rm = TRUE))
head(p_values_conc)
head(min_p_nrep)
# calculate the proportion of min_p_nrep that is sm/eq. p_value (for obs.)
p_value_adj <- sapply(p_values_nominal, function(x) mean(min_p_nrep <= x))
head(p_value_adj)
table(p_value_adj)
n_docs <- 363
# load('/Users/alicesommer/Desktop/p_values_1.RData')
load("/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_1.RData")
p_values_conc <- p_values_mat
for (d in 2:n_docs){
# load(paste0("/Users/alicesommer/Desktop/p_values_",d,".RData"))
load(paste0("n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_",d,".RData"))
p_values_conc <- cbind(p_values_conc, p_values_mat)
}
paste0("n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_",d,".RData")
"/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_1.RData"
n_docs <- 3
load('/Users/alicesommer/Desktop/p_values_1.RData')
# load("/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_1.RData")
p_values_conc <- p_values_mat
rm("p_values_mat")
for (d in 2:n_docs){
load(paste0("/Users/alicesommer/Desktop/p_values_",d,".RData"))
# load(paste0("n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_",d,".RData"))
p_values_conc <- cbind(p_values_conc, p_values_mat)
rm("p_values_mat")
}
p_values_nominal <- p_values_conc[1,]
p_values_nominal
load('/Users/alicesommer/Desktop/p_values_1.RData', envir = p_values_1)
?load
n_docs <- 363
2:n_docs
paste0("n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_", d,".RData")
# n_docs <- 363
n_docs <- 3
# n_docs <- 363
n_docs <- 3
load('/Users/alicesommer/Desktop/p_values_1.RData')
# load("/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_1.RData")
p_values_conc <- p_values_mat
rm("p_values_mat")
for (d in 2:n_docs){
load(paste("/Users/alicesommer/Desktop/p_values_",d,".RData", sep = ""))
# load(paste0("n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_", d,".RData"))
p_values_conc <- cbind(p_values_conc, p_values_mat)
rm("p_values_mat")
}
load(paste("/Users/alicesommer/Desktop/p_values_",d,".RData", sep = ""))
list(/Users/alicesommer/Desktop/)
list(/Users/alicesommer/Desktop)
list.files(/Users/alicesommer/Desktop)
list.files("/Users/alicesommer/Desktop")
list.files("/Users/alicesommer/Desktop/")
p_val_files<- list.files(work_dir)
n_docs <- length(p_val_files)
n_docs <- 363
load('/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/p_values_1.RData')
p_values_conc <- p_values_mat
rm("p_values_mat")
for (d in 2:n_docs){
load(paste("/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/p_values_",d,".RData", sep = ""))
p_values_conc <- cbind(p_values_conc, p_values_mat)
rm("p_values_mat")
}
load(paste("/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/p_values_",12,".RData", sep = ""))
list.files("/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/")
p_files <- list.files("/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/")
n_docs <- p_files
p_files <- list.files("/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/")
n_docs <- p_files
load(paste0('/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/', p_files[1]))
p_values_conc <- p_values_mat
rm("p_values_mat")
for (d in 2:n_docs){
load(paste0('/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/', p_files[d]))
p_values_conc <- cbind(p_values_conc, p_values_mat)
rm("p_values_mat")
}
2:n_docs
n_docs <- length(p_files)
for (d in 2:n_docs){
load(paste0('/Users/alicesommer/Desktop/gap_stat_cluster/p_values_hyp/', p_files[d]))
p_values_conc <- cbind(p_values_conc, p_values_mat)
rm("p_values_mat")
}
dim(p_values_conc)
n_docs <- length(p_files)
n_docs
prin(head(p_files))
print(head(p_files))
paste0('/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/', p_values_, k, ".RData")
paste0("/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_", k, ".RData")
k = 2
paste0("/n/home05/ajsommer/gap_stat_cluster/p_values_hyp/p_values_", k, ".RData")
load('/Users/alicesommer/Desktop/gap_stat_cluster/results/p_values_adj.RData')
hist(p_values_adj)
hist(p_values_adj, breaks = 10)
hist(p_values_adj, breaks = 100)
table(p_values_adj)
load('/Users/alicesommer/Desktop/gap_stat_cluster/results/p_values_nominal.RData')
load('/Users/alicesommer/Desktop/gap_stat_cluster/results/min_p_nrep.RData')
hist(p_values_nominal, breaks = 100)
load('/Users/alicesommer/Desktop/Bureau/data_sex_epi/gap_stat.Rdata')
plot(gap_stat,p_values_nominal)
mean(p_values_nominal[1] <= min_p_nrep)
plot(gap_stat,p_values_nominal)
axis(1, at = seq(63, 95, by = 1), las=2)
mean(min_p_nrep <= p_values_nominal[1])
plot(gap_stat,p_values_nominal,
ylab = "nominal p-value", xlab = "gap statistic")
axis(1, at = seq(63, 95, by = 1), las=2)
plot(gap_stat,p_values_nominal,
ylab = "nominal p-value", xlab = "gap statistic")
axis(1, at = seq(50, 95, by = 1), las=2)
mean(min_p_nrep <= p_values_nominal[1])
plot(gap_stat,p_values_nominal, xaxt="n",
ylab = "nominal p-value", xlab = "gap statistic")
axis(1, at = seq(50, 95, by = 1), las=2)
hist(min_p_nrep)
head(min_p_nrep)
table(min_p_nrep)
table(p_values_adj)
mean(min_p_nrep <= p_values_nominal[1])
table(min_p_nrep)
table(p_values_adj)
load('/Users/alicesommer/Desktop/DivNet_cluster/test_stat_DivNet.RData')
mean(t_array => t_array[1])
mean(t_array >= t_array[1])
t_array[1]
library(NetCoMi)
library(metagMisc)
load('/Users/alicesommer/Desktop/NetCoMi_cluster/ps_to_net_Fam.RData')
gut_split <- metagMisc::phyloseq_sep_variable(ps_fam, "W")
devtools::install_github("stefpeschel/NetCoMi", ref = "tests", force = TRUE)
# devtools::install_github("stefpeschel/NetCoMi", ref = "tests", force = TRUE)
library(NetCoMi)
library(metagMisc)
load('/Users/alicesommer/Desktop/NetCoMi_cluster/ps_to_net_Fam.RData')
gut_split <- metagMisc::phyloseq_sep_variable(ps_fam, "W")
net_W <- netConstruct(gut_split$`0`, gut_split$`1`, verbose = 2,
# filtTax = "highestVar",
# filtTaxPar = list(highestVar = 50),
measure = "spieceasi",
measurePar = list(method = "glasso",
nlambda=20,
pulsar.params=list(rep.num=50)),
normMethod = "none", zeroMethod = "none",
sparsMethod = "none", seed = 123456, matchDesign = c(1,1))
net_W <- netConstruct(gut_split$`0`, gut_split$`1`, verbose = 2,
# filtTax = "highestVar",
# filtTaxPar = list(highestVar = 50),
measure = "spieceasi",
measurePar = list(method = "glasso",
nlambda=20,
pulsar.params=list(rep.num=50)),
normMethod = "none", zeroMethod = "none",
sparsMethod = "none", seed = 123456, matchDesign = c(1,1))
setwd('/Users/alicesommer/Desktop/diff_means_cluster/Tarray_diff_mean')
load('Tarray_diff_mean1.RData')
print(paste(Tarray[1], ":", p_value))
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
library(phyloseq); packageVersion("phyloseq")
library(ggplot2); packageVersion("ggplot2")
# set working directory
setwd('/Users/alicesommer/Desktop/Bureau/DOCTORATE/data_pipeline_microbiome')
# load microbiome data
ASV_table <- readRDS('dada2output/seqtab2020.rds')
taxon_assign <- readRDS('dada2output/taxa2020.rds')
# load sample/matched_data
# load('dat_matched_PM25_bis.RData')
load('dat_matched_smoke_bis.RData')
# load W matrix for randomization test
# load("W_paired_PM25.Rdata")
load("W_paired_smoke_bis.Rdata")
# matched AP data
sample_df <- matched_df[order(matched_df$ff4_prid),]
sample_df$W <- as.factor(sample_df$W)
samples.out <- as.character(sample_df$ff4_prid)
rownames(sample_df) <- samples.out
# create a phyloseq object
ps <- phyloseq(otu_table(ASV_table, taxa_are_rows=FALSE),
sample_data(sample_df),
tax_table(taxon_assign))
ps
# locate the species that are totally absent in the matched data
# 1. have a vector of nr. of observed samples per taxa
vec_taxa <- apply(otu_table(ps), 2, function(x) sum(x > 0, na.rm = TRUE))
length(which(vec_taxa == 0))
# 2. how many tax are obs. in at least x% of samples
perc <- 0.10 # x%
# samp_perc <- trunc(dim(sample_df)[1]*perc)
samp_perc <- 0
length(which(vec_taxa > samp_perc))
ps_prune <- prune_taxa(vec_taxa > samp_perc, ps)
saveRDS(ps_prune, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_1.rds")
## agglomerate to Species ##
ps_Species <- tax_glom(ps, taxrank = "Species", NArm = FALSE)
vec_taxa_Sp <- apply(otu_table(ps_Species), 2, function(x) sum(x > 0, na.rm = TRUE))
length(which(vec_taxa_Sp > samp_perc))
ps_Species <- prune_taxa(vec_taxa_Sp > samp_perc, ps_Species)
ps_Species
saveRDS(ps_Species, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_2.rds")
## agglomerate to Genus ##
ps_Genus <- tax_glom(ps_prune, taxrank = "Genus", NArm = FALSE)
vec_taxa_Gen <- apply(otu_table(ps_Genus), 2, function(x) sum(x > 0, na.rm = TRUE))
table(vec_taxa_Gen)
ps_Genus_prune <- prune_taxa(vec_taxa_Gen > samp_perc, ps_Genus)
ps_Genus_prune
saveRDS(ps_Genus_prune, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_3.rds")
## agglomerate to Family ##
ps_Family <- tax_glom(ps_prune, taxrank = "Family", NArm = FALSE)
saveRDS(ps_Family, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_4.rds")
## agglomerate to Order ##
ps_Order <- tax_glom(ps_prune, taxrank = "Order", NArm = FALSE)
saveRDS(ps_Order, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_5.rds")
## agglomerate to Class ##
ps_Class <- tax_glom(ps_prune, taxrank = "Class", NArm = FALSE)
saveRDS(ps_Class, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_6.rds")
## agglomerate to Phylum ##
ps_Phylum <- tax_glom(ps_prune, taxrank = "Phylum", NArm = FALSE)
saveRDS(ps_Phylum, file = "/Users/alicesommer/Desktop/diff_means_cluster/ps_diff_mean_7.rds")
ps_prune
ps_Species
ps_Genus_prune
ps_Family
ps_prune
ps_Class
ps_Order
ps_Class
ps_Phylum
vec_taxa_Gen <- apply(otu_table(ps_Phylum), 2, function(x) sum(x > 0, na.rm = TRUE))
table(vec_taxa_Gen)
setwd('/Users/alicesommer/Desktop/diff_means_cluster/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
setwd('/Users/alicesommer/Desktop/diff_means_cluster/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
load(paste0("Tarray_diff_mean", 1, ".RData"))
Tarray_mat <- Tarray
rm("Tarray")
for (d in 2:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
Tarray_mat <- cbind(Tarray_mat, Tarray)
rm("Tarray")
}
dim(Tarray_mat)
hyp_matrix <- Tarray_mat
hyp_p_value <- matrix(NA, ncol = p_test, nrow = nrep)
hyp_p_value <- matrix(NA, ncol = p_test, nrow = dim(Tarray_mat)[1])
hyp_matrix <- Tarray_mat
hyp_p_value <- matrix(NA, ncol = 7, nrow = dim(Tarray_mat)[1])
# based on value (hyp_obs) of each row
for (r in 1:nrep){
if(verbose)
if(r%% ceiling(nrep/100) == 1)
cat(paste0('Testing rep : ',r,'/',nrep,' \n\r'))
# calc. hypothetical p_value on each column of the matrix
hyp_p_value[r,] <- apply(hyp_matrix, 2, function(x) mean(x >= x[r]))
}
nrep = dim(Tarray_mat)[1]
ntest = dim(Tarray_mat)[2]
hyp_matrix <- Tarray_mat
hyp_p_value <- matrix(NA, ncol = ntest, nrow = nrep)
# based on value (hyp_obs) of each row
for (r in 1:nrep){
if(verbose)
if(r%% ceiling(nrep/100) == 1)
cat(paste0('Testing rep : ',r,'/',nrep,' \n\r'))
# calc. hypothetical p_value on each column of the matrix
hyp_p_value[r,] <- apply(hyp_matrix, 2, function(x) mean(x >= x[r]))
}
verbose = T
# based on value (hyp_obs) of each row
for (r in 1:nrep){
if(verbose)
if(r%% ceiling(nrep/100) == 1)
cat(paste0('Testing rep : ',r,'/',nrep,' \n\r'))
# calc. hypothetical p_value on each column of the matrix
hyp_p_value[r,] <- apply(hyp_matrix, 2, function(x) mean(x >= x[r]))
}
# for each rep. take the min. p_value
min_p_nrep <- apply(hyp_p_value, 1, function(x) min(x, na.rm = TRUE))
head(min_p_nrep,20)
p_vals <- apply(Tarray_mat, 2, function(x) mean(x >= x[1]))
p_vals
# calculate the proportion of min_p_nrep that is sm/eq. p_value (for obs.)
p_value_adj <- sapply(p_vals, function(x) mean(min_p_nrep <= x))
head(p_value_adj[117])
p_vals
min_p_nrep
# calculate the proportion of min_p_nrep that is sm/eq. p_value (for obs.)
p_value_adj <- sapply(p_vals, function(x) mean(min_p_nrep <= x))
p_value_adj
p_value_adj
setwd('/Users/alicesommer/Desktop/diff_means_cluster_PM/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
setwd('/Users/alicesommer/Desktop/diff_means_cluster/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
load(paste0("Tarray_diff_mean", 1, ".RData"))
Tarray_mat <- Tarray
rm("Tarray")
for (d in 2:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
Tarray_mat <- cbind(Tarray_mat, Tarray)
rm("Tarray")
}
dim(Tarray_mat)
p_vals <- apply(Tarray_mat, 2, function(x) mean(x >= x[1]))
p_vals
nrep = dim(Tarray_mat)[1]
ntest = dim(Tarray_mat)[2]
hyp_matrix <- Tarray_mat
hyp_p_value <- matrix(NA, ncol = ntest, nrow = nrep)
verbose = T
# based on value (hyp_obs) of each row
for (r in 1:nrep){
if(verbose)
if(r%% ceiling(nrep/100) == 1)
cat(paste0('Testing rep : ',r,'/',nrep,' \n\r'))
# calc. hypothetical p_value on each column of the matrix
hyp_p_value[r,] <- apply(hyp_matrix, 2, function(x) mean(x >= x[r]))
}
# for each rep. take the min. p_value
min_p_nrep <- apply(hyp_p_value, 1, function(x) min(x, na.rm = TRUE))
head(min_p_nrep,20)
# calculate the proportion of min_p_nrep that is sm/eq. p_value (for obs.)
p_value_adj <- sapply(p_vals, function(x) mean(min_p_nrep <= x))
p_value_adj
p_vals
setwd('/Users/alicesommer/Desktop/diff_means_cluster_PM/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
setwd('/Users/alicesommer/Desktop/diff_means_cluster_PM/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, ".RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
setwd('/Users/alicesommer/Desktop/diff_means_cluster_PM/Tarray_diff_mean')
for (d in 1:7){
load(paste0("Tarray_diff_mean", d, "_PM.RData"))
p_value <- mean(Tarray >= Tarray[1])
print(paste(Tarray[1], ":", p_value))
rm("Tarray")
}
load(paste0("Tarray_diff_mean", 1, "_PM.RData"))
Tarray_mat <- Tarray
rm("Tarray")
for (d in 2:7){
load(paste0("Tarray_diff_mean", d, "_PM.RData"))
Tarray_mat <- cbind(Tarray_mat, Tarray)
rm("Tarray")
}
dim(Tarray_mat)
p_vals <- apply(Tarray_mat, 2, function(x) mean(x >= x[1]))
p_vals
nrep = dim(Tarray_mat)[1]
ntest = dim(Tarray_mat)[2]
hyp_matrix <- Tarray_mat
hyp_p_value <- matrix(NA, ncol = ntest, nrow = nrep)
verbose = T
# based on value (hyp_obs) of each row
for (r in 1:nrep){
if(verbose)
if(r%% ceiling(nrep/100) == 1)
cat(paste0('Testing rep : ',r,'/',nrep,' \n\r'))
# calc. hypothetical p_value on each column of the matrix
hyp_p_value[r,] <- apply(hyp_matrix, 2, function(x) mean(x >= x[r]))
}
# for each rep. take the min. p_value
min_p_nrep <- apply(hyp_p_value, 1, function(x) min(x, na.rm = TRUE))
head(min_p_nrep,20)
# calculate the proportion of min_p_nrep that is sm/eq. p_value (for obs.)
p_value_adj <- sapply(p_vals, function(x) mean(min_p_nrep <= x))
p_value_adj
