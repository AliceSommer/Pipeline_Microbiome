set.seed(16)
# Parameters for method:
samples_for_reference = round(nrow(X)*0.15) # how many samples should be taken for reference
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
condition = sample(1:samples_for_reference)
X_reference_select = X[condition,]
X_test = X[-c(condition),]
Y_reference_select = Y[condition]
Y_test = Y[-c(condition)]
Y_perm_reference_select = Y_perm[condition,]
Y_perm_test = Y_perm[-c(condition),]
#definitions and allocations:
p = ncol(X_reference_select)
n = nrow(X_reference_select)
stats_matrix = matrix(NA, ncol = p, nrow = nrep+1)
ratio_matrix = matrix(NA, nrow = n, ncol = 1)
verbose = T
# TEST = DACOMP.TEST.NAME.WILCOXON
# TEST = DACOMP.TEST.NAME.DIFFERENCE_IN_MEANS
TEST = DACOMP.TEST.NAME.LOG_FOLD_DIFFERENCE_IN_MEANS
#iterate over taxa and test
for(i in 1:p){
if(verbose)
if(i%% ceiling(p/10) == 1)
cat(paste0('Testing taxon : ',i,'/',p,' \n\r'))
nom = X_reference_select[,i]
dnom = apply(X_reference_select,1,sum) # because we don't have a reference set yet
#perform subsample and test
ratio_matrix[,1] = nom/(dnom)
stats_matrix[,i] = dacomp:::Compute.resample.test(ratio_matrix, Y_perm_reference_select, statistic = TEST)
}
#computes pvalues:
p.values = apply(stats_matrix, 2, function(x) mean(x >= x[1], na.rm = TRUE))
head(sort(p.values),20)
# Select the reference set of taxa using the above P-values
ind_reference_taxa = which((p.values >= .5))
# Sanity checks:
length(ind_reference_taxa)
# abundance check
counts_ref <- apply(otu_table(ps_work)[,ind_reference_taxa], 1,function(x) sum(x, na.rm = TRUE))
summary(counts_ref)
# Compute reference values
reference_values = apply(X_test[,ind_reference_taxa], 1, sum)
#iterate over taxa and test
for(t in 1:p_test){
if(verbose)
if(t%% ceiling(p/10) == 1)
cat(paste0('Testing taxon : ',t,'/',p,' \n\r'))
#no need to test reference taxa
if(t %in% ind_reference_taxa){
print(t)
next
}
nom_test = X_test[,t]
dnom_test = reference_values
ratio_matrix_test[,1] = nom_test/(dnom_test+nom_test)
ratio_matrix_test_save[,t] = ratio_matrix_test
stats_matrix_test[,t] = dacomp:::Compute.resample.test(ratio_matrix_test,Y_perm_test, statistic = TEST)
}
#computes pvalues:
p.values.ratio.normalization = apply(stats_matrix_test, 2, function(x) mean(x >= x[1]))
head(sort(p.values.ratio.normalization),20)
which(p.adjust(p.values.ratio.normalization,method = 'BH')<=0.15)
head(sort(p.adjust(p.values.ratio.normalization,method = 'BH')),20)
unname(tax_table(ps_work)[which(p.adjust(p.values.ratio.normalization,method = 'BH')<=0.15),])
p_test = ncol(X_test)
n_test = nrow(X_test)
stats_matrix_test = matrix(NA, ncol = p_test, nrow = nrep+1)
ratio_matrix_test = matrix(NA, nrow = n_test, ncol = 1)
ratio_matrix_test_save = matrix(NA, nrow = dim(X_test)[1], ncol = dim(X_test)[2])
# Compute reference values
reference_values = apply(X_test[,ind_reference_taxa], 1, sum)
#iterate over taxa and test
for(t in 1:p_test){
if(verbose)
if(t%% ceiling(p/10) == 1)
cat(paste0('Testing taxon : ',t,'/',p,' \n\r'))
#no need to test reference taxa
if(t %in% ind_reference_taxa){
print(t)
next
}
nom_test = X_test[,t]
dnom_test = reference_values
ratio_matrix_test[,1] = nom_test/(dnom_test+nom_test)
ratio_matrix_test_save[,t] = ratio_matrix_test
stats_matrix_test[,t] = dacomp:::Compute.resample.test(ratio_matrix_test,Y_perm_test, statistic = TEST)
}
#computes pvalues:
p.values.ratio.normalization = apply(stats_matrix_test, 2, function(x) mean(x >= x[1]))
head(sort(p.values.ratio.normalization),20)
which(p.adjust(p.values.ratio.normalization,method = 'BH')<=0.15)
head(sort(p.adjust(p.values.ratio.normalization,method = 'BH')),20)
unname(tax_table(ps_work)[which(p.adjust(p.values.ratio.normalization,method = 'BH')<=0.15),])
# STEP 1 to 3: recorded in "stats_matrix"
dim(stats_matrix_test)
hyp_matrix <- stats_matrix_test # remove first row (obs.)
hyp_p_value <- matrix(NA, ncol = p_test, nrow = dim(stats_matrix_test)[1])
# based on value (hyp_obs) of each row
for (r in 1:nrep){
if(verbose)
if(r%% ceiling(nrep/100) == 1)
cat(paste0('Testing rep : ',r,'/',nrep,' \n\r'))
# calc. hypothetical p_value on each column of the matrix
hyp_p_value[r,] <- apply(hyp_matrix, 2, function(x) mean(x >= x[r]))
}
# for each rep. take the min. p_value
min_p_nrep <- apply(hyp_p_value, 1, function(x) min(x, na.rm = TRUE))
head(min_p_nrep,20)
hist(min_p_nrep, breaks = 60, main = "", xlab = "minimun p-value for each rep.")
abline(v = p.values.ratio.normalization[117], col = "red")
text(0.02, y = 1190, 0.00019998, col = "red")
text(0.06, y = 800, "adj. p-value: 0.0064", col = "darkgreen")
# calculate the proportion of min_p_nrep that is sm/eq. p_value (for obs.)
p_value_adj <- sapply(p.values.ratio.normalization, function(x) mean(min_p_nrep <= x))
head(p_value_adj[117])
head(sort(p_value_adj),50)
p_adj_rejections <- which(p_value_adj <= 0.15)
p_adj_rejections
unname(tax_table(ps_work)[p_adj_rejections,])
p_adj_rejections <- which(p_value_adj <= 0.2)
p_adj_rejections
unname(tax_table(ps_work)[p_adj_rejections,])
p_adj_rejections <- which(p_value_adj <= 0.25)
p_adj_rejections
unname(tax_table(ps_work)[p_adj_rejections,])
p_adj_rejections <- which(p_value_adj <= 0.30)
p_adj_rejections
unname(tax_table(ps_work)[p_adj_rejections,])
p_adj_rejections <- which(p_value_adj <= 0.2)
p_adj_rejections
unname(tax_table(ps_work)[p_adj_rejections,])
unname(tax_table(ps_work)[which(p.adjust(p.values.ratio.normalization,method = 'BH')<=0.15),])
p_adj_rejections
knitr::opts_chunk$set(echo = TRUE)
library(NetCoMi)
library(metagMisc)
library(phyloseq)
library(igraph)
library(plyr)
library(ForceAtlas2)
library(pals)
library(corrplot)
# # load phyloseq data
# load('/n/home05/ajsommer/NetCoMi_cluster/ps_to_net_Gen_smoke.RData')
# gut_split <- metagMisc::phyloseq_sep_variable(ps_Genus_prune, "W")
# net_W <- netConstruct(gut_split$`0`, gut_split$`1`, verbose = 2,
# filtTax = "highestVar",
# filtTaxPar = list(highestVar = 50),
#                            measure = "spieceasi",
#                           measurePar = list(method = "glasso",
#                                             nlambda=20,
#                                             pulsar.params=list(rep.num=50)),
#                           normMethod = "none", zeroMethod = "none",
#                           sparsMethod = "none", seed = 123456, matchDesign = c(1,1))
# props_W <- netAnalyze(net_W, clustMethod = "cluster_fast_greedy")
load('/Users/alicesommer/Desktop/Bureau/DOCTORATE/data_pipeline_microbiome/ps_to_net_Gen_smoke.RData')
load('/Users/alicesommer/Desktop/Bureau/DOCTORATE/data_pipeline_microbiome/props_W_Gen_smoke.RData')
phyl_ps_prune <- as.factor(tax_table(ps_Genus_prune)[, 'Phylum'])
names(phyl_ps_prune) <- rownames(tax_table(ps_Genus_prune)[, 'Phylum'])
phylcol <- rainbow(length(unique(phyl_ps_prune)))
phyl_ps_fam <- as.factor(tax_table(ps_Genus_prune)[, 'Family'])
# names(phyl_ps_fam) <- rownames(tax_table(ps_Genus_prune)[, 'Family'])
labels_phyl <- substr(as.character(phyl_ps_fam), 1, 4)
set.seed(1)
# which(tax_table(ps_Genus_prune)[,"Class"] == "Mollicutes")
# 70 112
# which(tax_table(ps_Genus_prune)[,"Class"] == "Coriobacteriia")
# 28  50  77  87  90  99 110 128 131 >> same numbers for Family Coriobacteriaceae
# Genus level diff ab
# 24  40  53 105
shapeVec <- rep(1, ncol(otu_table(ps_Genus_prune)))
shapeVec[c(24, 40, 53, 105)] <- 2
shapeVec[c(28,  50,  77,  87,  90, 99, 110, 128, 131)] <- 3
shapeVec[c(70, 112)] <- 4
names(shapeVec) <- names(phyl_ps_prune)
plot_props <- plot(props_W,
layout = "layout_with_fr",
sameLayout = TRUE, layoutGroup = 1,
labels = FALSE,
# labelScale = TRUE,
featVecCol = phyl_ps_prune, nodeColor = "feature",
nodeTransp = 20,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "normCounts",
cexNodes = 1,
# nodeSizeSpread = 3,
cexTitle = 2,
edgeTranspLow = 30,
edgeTranspHigh = 30,
nodeShape = c("circle", "triangle","square","diamond"),
featVecShape = shapeVec,
rmSingles = "inboth",
mar = c(6,5,3,2), groupNames = c("Smoking", "Non-smoking"))
legend("top",
inset = .05, title = "phylum:",
legend=levels(phyl_ps_prune), ncol = 2,
col=phylcol, pt.bg = phylcol, bty = "n", pch=16)
legend("bottom",
inset = .13,
title = "weights:",
legend=c("+","-"), lty = 1, lwd = 2,
col=c("darkgreen","red"), bty="n", horiz = TRUE)
legend("bottom",
inset = .19,
title = "differentially abundant:",
legend=c("Genus (Marvinbryantia)","Family (Coriobacteriaceae, nb. ASV = 9)","Class (Mollicutes, nb. ASV = 2)"),
pch = c(2,0,5),
bty="n", horiz = FALSE)
legend("bottom",
inset = .1,
legend = "node size: median raw counts",
bty="n", horiz = TRUE)
summary(props_W)[[1]]
summary(props_W)
summary(props_W)[[1]]
summary(props_W)[[2]]
nclust_1 <- max(as.numeric(names(table(props_W$clustering$clust1))))+1
nclust_2 <- max(as.numeric(names(table(props_W$clustering$clust2))))+1
nclust <- nclust_1 + nclust_2
set.seed(16)
col <- sample(polychrome(nclust))
set.seed(1)
plot_cluster <- plot(props_W,
# layout = FA_coord,
layout = "layout_with_fr",
sameLayout = TRUE, layoutGroup = 1,
labels = FALSE,
labelFont = 1, cexLabels = 2,
nodeColor = "cluster",
colorVec = col,
sameColThresh = 2,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "normCounts", cexNodes = 1,
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec,
rmSingles = "inboth",
cexTitle = 2,
edgeTranspLow = 30,
edgeTranspHigh = 30,
mar = c(6,5,3,2), groupNames = c("Smoking", "Non-smoking"))
legend("bottom",
inset = .11,
title = "weights:",
legend=c("+","-"), lty = 1, lwd = 2,
col=c("darkgreen","red"), bty="n", horiz = TRUE)
legend("bottom",
inset = .17,
title = "differentially abundant:",
legend=c("Genus (Christensenellaceae-R-7-group)","Family (Coriobacteriaceae)","Class (Mollicutes)"),
pch = c(2,0,5),
bty="n", horiz = FALSE)
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
# labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
# sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "fix", cexNodes = .8,
nodeFilter = "names",
nodeShape = c("circle", "triangle","square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking", "Non-smoking"))
names_clust <- as.character(names(props_W$clustering$clust2[props_W$clustering$clust2 %in% c(1,2)]))
# labels_phyl <- substr(as.character(phyl_ps_prune[names_clust]), 1, 3)
col_module <- unique(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust])
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
# labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
# sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "fix", cexNodes = .8,
nodeFilter = "names",
nodeShape = c("circle", "triangle","square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking", "Non-smoking"))
names_clust <- as.character(names(which(props_W$clustering$clust1 == 2)))
# labels_phyl <- substr(as.character(phyl_ps_prune[names_clust]), 1, 3)
#col_module <- unique(plot_cluster$q1$Arguments$color[names_clust],
#                     plot_cluster$q2$Arguments$color[names_clust])
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "cluster",
#colorVec =  col_module,
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "fix", cexNodes = 1,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
names_clust <- as.character(names(which(props_W$clustering$clust1 == 2)))
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "fix", cexNodes = 1,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr", cexNodes = 1,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
plot_cluster <- plot(props_W,
# layout = FA_coord,
layout = "layout_with_fr",
sameLayout = TRUE, layoutGroup = 1,
labels = FALSE,
labelFont = 1, cexLabels = 2,
nodeColor = "cluster",
colorVec = col,
sameColThresh = 2,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr", cexNodes = 1,
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec,
rmSingles = "inboth",
cexTitle = 2,
edgeTranspLow = 30,
edgeTranspHigh = 30,
mar = c(6,5,3,2), groupNames = c("Smoking", "Non-smoking"))
plot_props <- plot(props_W,
layout = "layout_with_fr",
sameLayout = TRUE, layoutGroup = 1,
labels = FALSE,
# labelScale = TRUE,
featVecCol = phyl_ps_prune, nodeColor = "feature",
nodeTransp = 20,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr",
cexNodes = 1,
# nodeSizeSpread = 3,
cexTitle = 2,
edgeTranspLow = 30,
edgeTranspHigh = 30,
nodeShape = c("circle", "triangle","square","diamond"),
featVecShape = shapeVec,
rmSingles = "inboth",
mar = c(6,5,3,2), groupNames = c("Smoking", "Non-smoking"))
phyl_ps_prune <- as.factor(tax_table(ps_Genus_prune)[, 'Phylum'])
names(phyl_ps_prune) <- rownames(tax_table(ps_Genus_prune)[, 'Phylum'])
phylcol <- rainbow(length(unique(phyl_ps_prune)))
phyl_ps_fam <- as.factor(tax_table(ps_Genus_prune)[, 'Family'])
# names(phyl_ps_fam) <- rownames(tax_table(ps_Genus_prune)[, 'Family'])
labels_phyl <- substr(as.character(phyl_ps_fam), 1, 4)
set.seed(1)
# which(tax_table(ps_Genus_prune)[,"Class"] == "Mollicutes")
# 70 112
# which(tax_table(ps_Genus_prune)[,"Class"] == "Coriobacteriia")
# 28  50  77  87  90  99 110 128 131 >> same numbers for Family Coriobacteriaceae
# Genus level diff ab
# 24  40  53 105
shapeVec <- rep(1, ncol(otu_table(ps_Genus_prune)))
shapeVec[c(24, 40, 53, 105)] <- 2
shapeVec[c(28,  50,  77,  87,  90, 99, 110, 128, 131)] <- 3
shapeVec[c(70, 112)] <- 4
names(shapeVec) <- names(phyl_ps_prune)
plot_props <- plot(props_W,
layout = "layout_with_fr",
sameLayout = TRUE, layoutGroup = 1,
labels = FALSE,
# labelScale = TRUE,
featVecCol = phyl_ps_prune, nodeColor = "feature",
nodeTransp = 20,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr",
cexNodes = 1,
# nodeSizeSpread = 3,
cexTitle = 2,
edgeTranspLow = 30,
edgeTranspHigh = 30,
nodeShape = c("circle", "triangle","square","diamond"),
featVecShape = shapeVec,
rmSingles = "inboth",
mar = c(6,5,3,2), groupNames = c("Smoking", "Non-smoking"))
legend("top",
inset = .05, title = "phylum:",
legend=levels(phyl_ps_prune), ncol = 2,
col=phylcol, pt.bg = phylcol, bty = "n", pch=16)
legend("bottom",
inset = .13,
title = "weights:",
legend=c("+","-"), lty = 1, lwd = 2,
col=c("darkgreen","red"), bty="n", horiz = TRUE)
legend("bottom",
inset = .19,
title = "differentially abundant:",
legend=c("Genus (Marvinbryantia)","Family (Coriobacteriaceae, nb. ASV = 9)","Class (Mollicutes, nb. ASV = 2)"),
pch = c(2,0,5),
bty="n", horiz = FALSE)
legend("bottom",
inset = .1,
legend = "node size: median raw counts",
bty="n", horiz = TRUE)
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr", cexNodes = 2,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr",
# cexNodes = 2,
labelScale = FALSE,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr",
cexLabels = 1,
labelScale = FALSE,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
plot(props_W,
sameLayout = TRUE, layoutGroup = 1,
#labels = list(props_W$clustering$clust1[names_clust], props_W$clustering$clust2[names_clust]),
labelFont = 1, cexLabels = 1.5,
nodeColor = "colorVec",
colorVec =  list(plot_cluster$q1$Arguments$color[names_clust],
plot_cluster$q2$Arguments$color[names_clust]),
sameClustCol = FALSE,
nodeTransp = 40,
borderCol = "gray40", highlightHubs = FALSE,
nodeSize = "clr",
cexLabel = 1,
labelScale = FALSE,
nodeFilter = "names",
nodeShape = c("circle", "triangle", "square","diamond"),
featVecShape = shapeVec[names_clust],
nodeFilterPar = names_clust,
edgeTranspLow = 10, edgeTranspHigh = 10,
groupNames = c("Smoking (community 2)", "Non-smoking"))
